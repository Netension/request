@using Microsoft.Extensions.Logging
@using Netension.Request.Blazor.Brokers
@using Netension.Request.Blazor.ValueObjects
@using System.Threading

@inject IErrorChannel ErrorChanel
@inject ILogger<SampleErrorHandler> Logger

@implements IDisposable

@if (!(Error is null))
{
    <h3>@Error.Message</h3>
    <button @onclick="Hide">Ok</button>        
}

<CascadingValue Value="this">
    @ChildContent
</CascadingValue>

@code {
    public Error Error { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) ErrorChanel.Subscribe(OnHandleError);            

        return base.OnAfterRenderAsync(firstRender);
    }

    public void Dispose()
    {
        ErrorChanel.Unsubscribe(OnHandleError);
    }

    private Task OnHandleError(Error error, CancellationToken cancellationToken)
    {
        Error = error;
        StateHasChanged();

        return Task.CompletedTask;
    }

    private void Hide()
    {
        Error = null;
    }
}